#version 330 core

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    sampler2D emission;
    float shininess;
};

uniform Material material;

struct Light {
    //vec3 position;
    vec3 direction;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Light light;

out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;

uniform vec3 lightColor;
uniform float time;

uniform vec3 viewPos;

void main()
{
    // ambient
    /* material.ambient dont exist cuz for diffuse maps, ambient and diffuse are fucking same */
    //vec3 ambient = material.ambient * light.ambient;
    
    vec3 ambient = light.ambient * texture(material.diffuse, TexCoords).rgb;

    // diffuse

    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(-light.direction);
    float diffuseLight = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diffuseLight * texture(material.diffuse, TexCoords).rgb;  

    // specular
    
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess);
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords)).rgb;  

    //emission map

    vec3 emission = cos(10*time) * sin(10*time) *(vec3(texture(material.emission, TexCoords)));

    vec3 result = ambient + diffuse + specular + emission;
    FragColor = vec4(result, 1.0);
}